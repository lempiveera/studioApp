/* {({ item }) => (
                        <View style={styles.listContainer2}>
                            <SwipeView
                                disableSwiptetoRight={false}
                                renderVisibleContent={() => <Text style={styles.text}>SwipeMe</Text>}
                                renderRightView={() => (
                                    <View style={{ flex: 1, justifyContent: 'flex-end', alignItems: 'center', backgroundColor: 'red' }}>

                                    </View>
                                )}
//yea the swipething is not gonna work for now, look into options 
                            //    leftOpenValue={this.leftOpenValue}
                            //    rightOpenValue={this.rightOpenValue}
                                onSwipedLeft={() => alert("deleted")}
                                swipeDuration={300}
                                swipeToOpenPercent={40}
                                disableSwipeToRight={true}
                            />
                        </View>
                    )
                    }


notification shit 
PushNotification.configure({

    onRegister: function (token) {
      console.log("TOKEN:", token);
    },

    onNotification: function (notification) {
      console.log("NOTIFICATION:", notification);
      //notification.finish(PushNotificationIOS.FetchResult.NoData);
    },
  
    permissions: {
      alert: true,
      badge: true,
      sound: true,
    },

    popInitialNotification: true,
    requestPermissions: true,
  });

  const testPush = () => {
    PushNotification.localNotification({
        title: 'notification title',
        message: 'notification message'
    });
}


    //location permissions
    const getLocationAsync = async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
          Alert.alert('No permission to get location')
          return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
  }

      
        registerForPushNotificationsAsync = async () => {
    
            //checks what the current state of the permissions is
            const { status: existingStatus } = await Permissions.getAsync(
                Permissions.NOTIFICATIONS
            );
    
            let finalStatus = existingStatus;
    
            //if not granted it will ask the user to allow notifications
            if (existingStatus !== 'granted') {
                const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);
                finalStatus = status;
            }
    
            //if user denies permissions the function will end
            if (finalStatus !== 'granted') {
                return;
            }
    
            //if user gives permissions we save it to a token (or something like that)
            let token = await Notifications.getExpoPushTokenAsync();
        }
    
    
        const createChannels = () => {
            PushNotification.createChannel({
                channelId: "test-channel",
                channelName: "Test Channel"
            })
        }
    // TODO: YOU ARE HERE ERROR IS "null is not an object (evaluating 'RNPushNotification.createChannel')"
        const handleNotification = () => {
            PushNotification.localNotification({
                channelId: "test-channel",
                title: "You cliked show notification",
                message: "message",
            });
        }
    */



        /*notification permiossions
    askPermissions = async () => {
        const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);
        let finalStatus = existingStatus;
        if (existingStatus !== "granted") {
            const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);
            finalStatus = status;
        }
        if (finalStatus !== "granted") {
            return false;
        }
        return true;
    };

    const sendNotificationImmediately = async () => {
        let notificationId = await Notifications.presentLocalNotificationAsync({
          title: 'This is crazy',
          body: 'Your mind will blow after reading this',
        });
        console.log(notificationId); // can be saved in AsyncStorage or send to server
      };

                  <View style={styles.buttonContainer}>

            </View>

                buttonContainer: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
*/